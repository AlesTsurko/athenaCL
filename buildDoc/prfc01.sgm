<preface id="preface">
   <title>Preface</title>
      <para></para>



      <!--###################################################################-->
      <sect1 id="sect-overview">
      <title>Overview of the athenaCL System</title>   
      
      <para>The athenaCL system is a software tool for creating musical structures. Music is rendered as a polyphonic event list, or an EventSequence object. This EventSequence can be converted into diverse forms, or OutputFormats, including scores for the Csound synthesis language, Musical Instrument Digital Interface (MIDI) files, and other specialized formats. Within athenaCL, Orchestra and Instrument models provide control of and integration with diverse OutputFormats. Orchestra models may include complete specification, at the code level, of external sound sources that are created in the process of OutputFormat generation.
      </para>

      <para>The athenaCL system features specialized objects for creating and manipulating pitch structures, including the Pitch, the Multiset (a collection of Pitches), and the Path (a collection of Multisets). Paths define reusable pitch groups. When used as a compositional resource, a Path is interpreted by a Texture object (described below).
      </para>

      <para>The athenaCL system features three levels of algorithmic design. The first two levels are provided by the ParameterObject and the Texture. The ParameterObject is a model of a low-level one-dimensional parameter generator and transformer. The Texture is a model of a multi-dimensional generative musical part. A Texture is controlled and configured by numerous embedded ParameterObjects. Each ParameterObject is assigned to either event parameters, such as amplitude and rhythm, or Texture configuration parameters. The Texture interprets ParameterObject values to create EventSequences. The number of ParameterObjects in a Texture, as well as their function and interaction, is determined by the Texture's parent type (TextureModule) and Instrument model. Each Texture is an instance of a TextureModule. TextureModules encode diverse approaches to multi-dimensional algorithmic generation. The TextureModule manages the deployment and interaction of lower level ParameterObjects, as well as linear or non-linear event generation. Specialized TextureModules may be designed to create a wide variety of musical structures.
      </para>

<!--example of things possible by more tn parameter generation aloine;  , such as algorithmically-generated ornamentation (Ariza 2003 [AN#425]) -->

      <para>The third layer of algorithmic design is provided by the Clone, a model of the multi-dimensional transformative part. The Clone transforms EventSequences generated by a Texture. Similar to Textures, Clones are controlled and configured by numerous embedded ParameterObjects.
      </para>

      <para>Each Texture and Clone creates a collection of Events. Each Event is a rich data representation that includes detailed timing, pitch, rhythm, and parameter data. Events are stored in EventSequence objects. The collection all Texture and Clone EventSequences is the complete output of athenaCL. These EventSequences are transformed into various OutputFormats for compositional deployment.
      </para>
      
<!-- mention that events are variable sized?
filter po: can be linear or nonlinear, and can be run in sequence. -->

      <para>For general information on computer aided algorithmic composition and generative music systems, see the resources listed here and in <xref linkend="bibliography"></xref> (Ariza [AN#969], [AN#1940]). 
      </para>


      <para>The athenaCL system has been under development since June 2000. The software is cross platform, developed under an open-source license, and programmed in the Python language. An interactive command-line interface is the primary user environment of athenaCL, though the complete functionality of the system is alternatively available as a scriptable batch processor or as a programmable Python extension library. 
      </para>
      

      
      </sect1>

      <!--###################################################################-->
      <sect1 id="sect-about">
      <title>About the Tutorial Manual</title>
            
      <para>This document consists of a number of different tutorials, each focusing on different aspects of the athenaCL system from the perspective of the user. Following the tutorials are appendices, providing documentation useful for reference. Much of this reference documentation is also available from within athenaCL. This document does not offer a complete description of the history, context, and internal structure of the athenaCL system; such a description, including comparative analysis to related historical and contemporary systems and detailed explanation of object models and interactions, is provided in the text <e>An Open Design for Computer-Aided Algorithmic Music Composition: athenaCL</e> (Ariza 2005 [AN#900]). Numerous additional articles are available that explore aspects of the athenaCL system in detail (Ariza 2002 [AN#5], 2003 [AN#425], 2004 [AN#443], 2005 [AN#613], 2006 [AN#1343], 2007 [AN#1355], 2007 [AN#1617], 2008 [AN#1824], 2009 [AN#1990]). Users interested in code-level work, either modifying or extending the athenaCL system, should consult these additional resources.
      </para>

      <para>The tutorials need not be done in any particular order, but should be chosen depending on interests. All users should read <xref linkend="ch-interface"></xref> and <xref linkend="ch-ao-em"></xref> to gain familiarity with the interface and basic athenaCL concepts. Users interested in composing music with athenaCL should then read <xref linkend="ch-texture"></xref>, <xref linkend="ch-texture-path"></xref>, and <xref linkend="ch-clone"></xref>. Returning to <xref linkend="ch-path"></xref> may be necessary for more details on Paths, and advanced users should read <xref linkend="ch-automate"></xref>.
      </para>
      
      
      </sect1>


      <!--###################################################################-->
      <sect1 id="sect-conventions">
      <title>Conventions Used in This Manual</title>
      <para>The following typographical conventions are used throughout this book:</para>
      
      <para><screen>Constant width</screen></para>
      
      <para>Used for athenaCL text output as transcribed in examples. This is what the program displays to the user.</para>
      
      <para><screen><ui>Constant width bold</ui></screen>
      </para>
      
      <para>Used for user text input as transcribed in examples. This is what the user enters into the program.
      </para>
      
      </sect1>



      <!--###################################################################-->
      <sect1 id="sect-production">
      <title>Production of This Manual</title>
      
      <para>The first edition of the <e>athenaCL Tutorial Manual</e> was released in August of 2001 and covered athenaCL versions 1.0 to 1.3. The second edition was released in June 2005 and covers athenaCL versions 1.4 and beyond. The third edition was released in July 2010 and converse athenaCL versions 2.0.
      </para>
      
      <para>This manual is constructed and maintained with the help of various open-source tools: <ulink url="http://www.docbook.org">DocBook</ulink>, <ulink url="http://docbook.sourceforge.net/projects/dsssl/">the Modular DocBook Stylesheet distribution</ulink>, <ulink url="http://openjade.sourceforge.net/">OpenJade</ulink>, <ulink url="http://www.python.org/">Python</ulink>, and <ulink url="http://www.imagemagick.org/">ImageMagick</ulink>.
      </para>

<!-- 
      <para><ulink url="http://www.tug.org/applications/pdftex/">pdfTeX</ulink></para>
 -->
 
 
      </sect1>





</preface>
