<chapter id="ch-texture-path">
   <title>Tutorial 5: Textures and Paths</title>
   
      <para>This tutorial demonstrates basic use of Paths within Textures. This chapter is essential for understanding the use of Paths in algorithmic music production.</para>



      <!--###################################################################-->
      <sect1 id="sect-path-linking">
      <title>Path Linking and Pitch Formation Redundancy</title>


      <para>Textures link to Paths. Said another way, a Texture contains a reference to a Path object stored in the AthenaObject. Numerous Textures can thus share the same Path; further, if a change is made to this Path, all Textures will reference the newly updated version of the Path.
      </para>

      <para>Events generated by a Texture can derive pitch values from a sequence of many transformations. These transformations allow the user to work with Pitch materials in a wide variety of orientations and parametric specifications. One or more Textures may share a single Path to derive pitch class or pitch space pitch values. Each Texture has independent ParameterObject control of a local transposition (local field) and a local register position (local octave), and with most TextureModules this control can be configured to be applied once per event or once per Path set. Finally, each Texture has a modular Temperament object to provide microtonal and dynamic final pitch tuning. Ultimately, the TextureModule is responsible for interpreting this final pitch value into a linear, horizontal, or other event arrangement.
      </para>

      <para>For example, a Texture may be linked to simple Path consisting of a single pitch. This pitch will serve as a referential pitch value for all pitch generation and transformation within the Texture. The Texture's local field and local octave controls could then be used to produce a diverse collection of Pitch values. Changing the single pitch of the Path would then provide global transposition of Texture-based pitch processes. Alternatively, a Path may specify a complex sequence of chord changes. Numerous Textures, linked to this single Path, could each apply different local octave settings to distinguish register, and could each apply different microtonal tunings with local field and Temperament settings. 
      </para>


      </sect1>

      <!--###################################################################-->
      <sect1 id="sect-path-df">
      <title>Creating a Path with a Duration Fraction</title>
      
      <para>First, the user creates a path consisting of three Multisets. As demonstrated in <xref linkend="ch-path"></xref>, there are many ways to create and edit a Path. In the following example, the user creates a new path named q1 by simply providing pitch space values using conventional note names. The path is the then viewed with the PIv command, and auditioned with the PIh command.
      </para>
      
<example>
<title>Creating a Path with PIn</title>
<screen>[PI()TI()] :: <ui>pin</ui>
name this PathInstance: <ui>q1</ui>
enter a pitch set, sieve, spectrum, or set-class: <ui>D2,G#3,A3,D3,E2,B2,A2</ui> 
   SC 5-29A as (D2,G#3,A3,D3,E2,B2,A2)? (y, n, or cancel): <ui>y</ui>
   add another set? (y, n, or cancel): <ui>y</ui>
enter a pitch set, sieve, spectrum, or set-class: <ui>C4,C#4,F#3,G4,A3</ui>
   SC 5-19A as (C4,C#4,F#3,G4,A3)? (y, n, or cancel): <ui>y</ui>
   add another set? (y, n, or cancel): <ui>y</ui>
enter a pitch set, sieve, spectrum, or set-class: <ui>G#5,A4,D#4,E5</ui> 
   SC 4-8 as (G#5,A4,D#4,E5)? (y, n, or cancel): <ui>y</ui>
   add another set? (y, n, or cancel): <ui>n</ui>
PI q1 added to PathInstances.

[PI(q1)TI()] :: <ui>piv</ui>
PI: q1, voiceType: none
psPath              -22,-4,-3,-10,-20,-13,-15  0,1,-6,7,-3       20,9,3,16      
                    D2,G#3,A3,D3,E2,B2,A2      C4,C#4,F#3,G4,A3  G#5,A4,D#4,E5  
pcsPath             2,8,9,2,4,11,9             0,1,6,7,9         8,9,3,4        
scPath              5-29A                      5-19A             4-8            
durFraction         1(33%)                     1(33%)            1(33%)         
TI References: none.
PathVoices: none.

[PI(q1)TI()] :: <ui>pih</ui>
PI q1 hear with TM LineGroove complete.
(/Volumes/xdisc/_scratch/2005.06.01.08.29.01.mid)
</screen></example>
      
      <para>As should be clear from the psPath display or the auditioned MIDI file, Path q1 covers a wide pitch range, from E2 to G#5. Notice also that the "durFraction" specifies that each Multiset in the Path has an equal duration weighting (1, or 33%). The durFraction of a Path is a means of providing a proportional temporal weighting to each Multiset in the Path. When a Texture interprets a Path, it partitions its duration into as many segments as there are Path Multisets, and each segment is given a duration proportional to the Path durFraction. The command PIdf can be used to alter a Path's duration weighting. The user must supply a list of values, either as percentages (floating point or integer) or simply as numeric weightings. In the following example, after calling PIdf, the command PIh is used to audition the results of an altered durFraction:
      </para>      
      
<example>
<title>Altering a Path's durFraction with PIdf</title>
<screen>[PI(q1)TI()] :: <ui>pidf</ui>
edit PI q1
enter a list of duration fractions: <ui>8,5,3</ui>
PI q1 edited.

[PI(q1)TI()] :: <ui>piv</ui>
PI: q1, voiceType: none
psPath              -22,-4,-3,-10,-20,-13,-15  0,1,-6,7,-3       20,9,3,16      
                    D2,G#3,A3,D3,E2,B2,A2      C4,C#4,F#3,G4,A3  G#5,A4,D#4,E5  
pcsPath             2,8,9,2,4,11,9             0,1,6,7,9         8,9,3,4        
scPath              5-29A                      5-19A             4-8            
durFraction         8(50%)                     5(31%)            3(19%)         
TI References: none.
PathVoices: none.

[PI(q1)TI()] :: <ui>pih</ui>
PI q1 hear with TM LineGroove complete.
(/Volumes/xdisc/_scratch/2005.06.01.08.42.04.mid)
</screen></example>      

      <para>The PIv display shows that the Multisets are weighted such that the first is given 50%, the second 31%, and the last 19%. The MIDI file created with PIh should confirm this distribution.
      </para>

<!-- tutorial06-a.xml -->

      </sect1>

      <!--###################################################################-->
      <sect1 id="sect-em-ti">
      <title>Setting EventMode and Creating a Texture</title>
      
      <para>As explained in <xref linkend="ch-texture"></xref>, the athenaCL EventMode determines what instruments are available for Texture creation. In the following example, the EventMode is set to midi, the TextureModule LiteralVertical is selected, a new Texture is created with instrument 0, and the Texture is displayed with TIv.
      </para>
      
<example>
<title>Creating a Texture with TM LiteralVertical</title>
<screen>[PI(q1)TI()] :: <ui>emo</ui>
select an EventMode mode: <ui>midi</ui>
EventMode mode set to: midi.

[PI(q1)TI()] :: <ui>tmls</ui>
TextureModules available:
{name,TIreferences}
   DroneArticulate    0
   DroneSustain       0
   HarmonicAssembly   0
   HarmonicShuffle    0
   InterpolateFill    0
   InterpolateLine    0
   IntervalExpansion  0
   LineCluster        0
 + LineGroove         0
   LiteralHorizontal  0
   LiteralVertical    0
   MonophonicOrnament 0
   TimeFill           0
   TimeSegment        0

[PI(q1)TI()] :: <ui>tmo lv</ui>
TextureModule LiteralVertical now active.

[PI(q1)TI()] :: <ui>tin a1 0</ui>
TI a1 created.

[PI(q1)TI(a1)] :: <ui>tiv</ui>
TI: a1, TM: LiteralVertical, TC: 0, TT: TwelveEqual
pitchMode: pitchSpace, polyMode: set, silenceMode: off, postMapMode: on
midiProgram: piano1
   status: +, duration: 000.0--20.16
(i)nstrument        0 (generalMidi: piano1)                                    
(t)ime range        00.0--20.0                                                 
(b)pm               constant, 120                                              
(r)hythm            loop, ((4,1,+),(4,1,+),(4,5,+)), orderedCyclic             
(p)ath              q1                                                         
                    (D2,G#3,A3,D3,E2,B2,A2),(C4,C#4,F#3,G4,A3),(G#5,A4,D#4,E5) 
                    10.00(s), 6.25(s), 3.75(s)                                 
local (f)ield       constant, 0                                                
local (o)ctave      constant, 0                                                
(a)mplitude         constant, 0.9                                              
pan(n)ing           constant, 0.5                                              
au(x)iliary         none                                                       
texture (s)tatic                                                               
   s0               loopWithinSet, on                                          
   s1               maxTimeOffset, 0.04                                        
   s2               levelFieldPolyphonic, event                                
   s3               levelOctavePolyphonic, event                               
texture (d)ynamic   none        
</screen></example>      
      
      <para>Notice that the Texture's Path attribute is set to q1. In all cases, a Texture, when created, links to the active Path. The Path a Texture links to can be edited later if necessary. Notice also that the Path listing in the TIv display shows the pitches of the Path, as well as timings for each set: 10, 6.25, and 3.74 seconds respectively. These times are the result of the duration fraction applied to the Texture's duration.
      </para>
      
      <para>To hear this Texture, create an EventList as explained in <xref linkend="sect-create-el"></xref>. After using the ELn command, the ELh command can be used to open the MIDI file. Notice that each chord lasts the appropriate duration fraction of the total twenty-second duration of the Texture.
      </para>

      <para>A few small edits to this Texture may make it more interesting. In the following example, both the rhythm and amplitude are edited: the rhythm is given more Pulses and told to oscillate back and forth along the specified series; the amplitude randomly selects from a list of four amplitudes.
      </para>

<example>
<title>Editing a Texture</title>
<screen>[PI(q1)TI(a1)] :: <ui>tie</ui>
edit TI a1
which parameter? (i,t,b,r,p,f,o,a,n,x,s): <ui>r</ui>
current rhythm: loop, ((4,1,+),(4,1,+),(4,5,+)), orderedCyclic
new value: <ui>l, ((4,1,1), (4,1,1), (4,3,0), (2,3,1), (3,2,1), (3,2,1)), oo</ui>
TI a1: parameter rhythm updated.

[PI(q1)TI(a1)] :: <ui>tie</ui>
edit TI a1
which parameter? (i,t,b,r,p,f,o,a,n,x,s): <ui>a</ui>
current amplitude: constant, 0.9
new value: <ui>bg, rc, (.5,.6,.8,1)</ui>
</screen></example>      

      <para>Again, ELn and ELh can be used to create and audition the resulting musical structure.
      </para>

      </sect1>
      
      
<!-- tutorial06-b.xml -->

      <!--###################################################################-->
      <sect1 id="sect-pitch-mode">
      <title>PitchMode and PolyMode</title>
      
      <para>PitchMode and PolyMode are Texture attributes that control the interpretation of the Path from inside a TextureInstance.
      </para>
      
      <para>PitchMode determines if a Path is represented to the Texture as a pitch space set, a pitch class set, or set class. As a pitch space set, a Texture performs register information included in a Path The set (1,11,24), performed as a pitch space set, would consist of a C-sharp, a B-natural a minor seventh above the lowest pitch, and C-natural an octave and major-seventh above the lowest pitch. The set (1,11,24) performed as a pitch-class set, would be interpreted as the set (1,11,0): register information is removed, while pitch class is retained. The set (1,11,24), performed as a set-class, would be interpreted as the set (0,1,2): register and pitch-class are removed, while the normal-form of the set-class is retained.
      </para>

      <para>In the following example, a new Texture is created from TextureModule LineGroove. First, the TM must be selected with the TMo command. Next, a new Texture named b1 is created with the TIn command. The TImode command can be used to edit many Texture options. In this example, pitchMode is selected and "pcs," for pitch class space, is selected. Finally, the Texture is given a more interesting rhythm, by use of the Rhythm ParameterObject markovPulse, and is panned to the right with a constant value:
      </para>

<example>
<title>Editing PitchMode of a TextureInstance</title>
<screen>[PI(q1)TI(a1)] :: <ui>tmo lg</ui>
TextureModule LineGroove now active.

[PI(q1)TI(a1)] :: <ui>tin b1 0</ui>
TI b1 created.

[PI(q1)TI(b1)] :: <ui>timode</ui>
edit TI b1: Pitch, Polyphony, Silence, or PostMap Mode? (p, y, s, m): <ui>p</ui>
   current Pitch Mode: pitchSpace. enter new mode (sc, pcs, ps): <ui>pcs</ui>
Pitch Mode changed to pitchClass

[PI(q1)TI(b1)] :: <ui>tie</ui>
edit TI b1
which parameter? (i,t,b,r,p,f,o,a,n,x,s): <ui>r</ui>
current rhythm: loop, ((4,1,+),(4,1,+),(4,5,+)), orderedCyclic
new value: <ui>mp, a{6,1,1}b{3,2,0}c{3,5,1}:{a=5|b=3|c=2}, (c,0)</ui>
TI b1: parameter rhythm updated.

[PI(q1)TI(b1)] :: <ui>tie n c,.9</ui>
TI b1: parameter panning updated.

[PI(q1)TI(b1)] :: <ui>tiv</ui>
TI: b1, TM: LineGroove, TC: 0, TT: TwelveEqual
pitchMode: pitchClass, polyMode: set, silenceMode: off, postMapMode: on
midiProgram: piano1
   status: +, duration: 00.0--20.0
(i)nstrument        0 (generalMidi: piano1)
(t)ime range        00.0--20.0
(b)pm               constant, 120
(r)hythm            markovPulse, a{6,1,1}b{3,2,0}c{3,5,1}:{a=5|b=3|c=2},
                    (constant, 0)
(p)ath              q1
                    (D2,G#3,A3,D3,E2,B2,A2),(C4,C#4,F#3,G4,A3),(G#5,A4,D#4,E5)
                    10.00(s), 6.25(s), 3.75(s)
local (f)ield       constant, 0
local (o)ctave      constant, 0
(a)mplitude         constant, 0.9
pan(n)ing           constant, 0.9
au(x)iliary         none
texture (s)tatic
   s0               parallelMotionList, (), 0.0
   s1               pitchSelectorControl, randomPermutate            
   s2               levelFieldMonophonic, event
   s3               levelOctaveMonophonic, event
texture (d)ynamic   none
</screen></example>

<!-- note: there may be bug aboive: the path is shown in pitch space values, even though it is in pitch class space -->


      <para>Because Path q1 is still active, this new Texture is assigned the same Path as Texture a1. After setting the Texture's pitchMode to pitchClassSpace, however, Texture b1 will receive only pitch class values from Path q1: all register information, as performed in Texture a1, is stripped. By creating a new EventList with ELn and auditioning the results, it should be clear that both Textures share the same pitch information and duration weighting. Notice that the faster-moving single-note line Texture b1, however, stays within a single register. When a Texture is in pitchClassSpace Pitch mode, all pitches from a Path are interpreted within the octave from C4 to C5. 
      </para>

      <para>PolyMode determines if a Path is to be interpreted as set or as a part-voiced vertical. The value PolyMode is either "set" or "part". The default setting is "set" and can be used with any Path; "parts" can only be used if a Path has equal numbers of elements in each set. For more information on using PathVoices see <xref linkend="ch-pv-ps"></xref>. PolyMode is not yet implemented by a TextureModule.
      </para>

      </sect1>

<!-- tutorial06-c.xml -->


      <!--###################################################################-->      
      <sect1 id="sect-edit-octave">
      <title>Editing Local Octave</title>
      
      <para>With a Texture's local field and local octave controls, ParameterObjects can be used to alter the pitches derived from a Path. In most TextureModules, the transformation offered by field and octave control can be applied either once per Multiset, or once per event. This is set by editing the TextureStatic options levelField and levelOctave.
      </para>

      <para>In the following example, the local octave attribute of Texture b1 is edited such that octaves are chosen in order from a list of possibilities, creating a sequence of octave transpositions. An octave value of 0 means no transposition; an octave of -2 means a transposition two octaves down.
      </para>

<example>
<title>Editing Local Octave</title>
<screen>[PI(q1)TI(b1)] :: <ui>tie</ui>
edit TI b1
which parameter? (i,t,b,r,p,f,o,a,n,x,s): <ui>o</ui>
current local octave: constant, 0
new value: <ui>bg, oc, [-3,-2,2,-1]</ui>
TI b1: parameter local octave updated.

[PI(q1)TI(b1)] :: <ui>tiv</ui>
TI: b1, TM: LineGroove, TC: 0, TT: TwelveEqual
pitchMode: pitchClass, polyMode: set, silenceMode: off, postMapMode: on
midiProgram: piano1
   status: +, duration: 000.0--20.08
(i)nstrument        0 (generalMidi: piano1)
(t)ime range        00.0--20.0
(b)pm               constant, 120
(r)hythm            markovPulse, a{6,1,1}b{3,2,0}c{3,5,1}:{a=5|b=3|c=2},
                    (constant, 0)
(p)ath              q1
                    (D2,G#3,A3,D3,E2,B2,A2),(C4,C#4,F#3,G4,A3),(G#5,A4,D#4,E5)
                    10.00(s), 6.25(s), 3.75(s)
local (f)ield       constant, 0
local (o)ctave      basketGen, orderedCyclic, (-3,-2,2,-1)
(a)mplitude         constant, 0.9
pan(n)ing           constant, 0.9
au(x)iliary         none
texture (s)tatic
   s0               parallelMotionList, (), 0.0
   s1               pitchSelectorControl, randomPermutate            
   s2               levelFieldMonophonic, event
   s3               levelOctaveMonophonic, event
texture (d)ynamic   none
</screen></example>


      <para>Listening to the results of the previous edit (with ELn and ELh), it should be clear that a new octave is applied to each event of Texture b1, creating an regular oscillation of register independent of Path Multiset.
      </para>

      <para>Alternatively, the user may desire local octave and field controls to only be applied once per Multiset. This option can be set for TextureModule LineGroove by editing the TextureStatic parameter "levelOctaveMonophonic." In the following example, the user examines the documentation of ParameterObject levelOctaveMonophonic, and a copy of Texture b1 is created named b2. Next, this Texture's panning is edited, and then the TextureStatic option levelOctaveMonophonic is changed from "event" to "set":
      </para>

<example>
<title>Editing TextureStatic</title>
<screen>[PI(q1)TI(b1)] :: <ui>tpv leveloctave</ui>
Texture Static ParameterObject
{name,documentation}
levelOctaveMonophonic levelOctaveMonophonic, level
                      Description: Toggle between selection of local octave
                      (transposition) values per set of the Texture's Path, or
                      per event. Arguments: (1) name, (2) level {'set', 'event'}
levelOctavePolyphonic levelOctavePolyphonic, level
                      Description: Toggle between selection of local octave
                      (transposition) values per set of the Texture's Path, per
                      event, or per polyphonic voice event. Arguments: (1) name,
                      (2) level {'set', 'event', 'voice'}

[PI(q1)TI(b1)] :: <ui>ticp b1 b2</ui>
TextureInstance b2 created.

[PI(q1)TI(b2)] :: <ui>tie</ui>
edit TI b2
which parameter? (i,t,b,r,p,f,o,a,n,x,s): <ui>s</ui>
select a static texture parameter to edit, from s0 to s3: <ui>3</ui>
current value for e3: <ui>event</ui>
new value: <ui>set</ui>
TI b2: parameter texture static updated.

[PI(q1)TI(b2)] :: <ui>tie</ui>
edit TI b2
which parameter? (i,t,b,r,p,f,o,a,n,x,s): <ui>n</ui>
current panning: constant, 0.9
new value: <ui>c, .1</ui>
TI b2: parameter panning updated.
</screen></example>



      <para>Listening to a new EventList created with these three Textures (with ELn and ELh), it should be clear that all pitch information is synchronized by use of a common Path. In the case of Texture a1, the pitches are taken directly from the Path with register. In the case of Texture b1 (right channel), the Path pitches, without register, are transposed into various registers for each event. In the case of Texture b2 (left channel), the Path pitches, also without register, are transposed into various registers only once per Multiset.
      </para>

<!-- tutorial06-d.xml -->


      </sect1>


      <!--###################################################################-->
      <sect1 id="sect-edit-temperament">
      <title>Editing Local Field and Temperament</title>

      <para>Within athenaCL, any pitch can be tuned to microtonal specifications, allowing the user to apply non-equal tempered frequencies to each pitch in either a fixed relationship or a dynamic, algorithmically generated manner. Within athenaCL Textures there are two ways to provide microtonal tunings. First, pitches can be transposed and tuned with any ParameterObject by using the Texture local field attribute. Each integer represents a half-step transposition, and floating point values can provide any detail of microtonal specification. Second, each Texture can have a different Temperament, or tuning system based on either pitch class, pitch space, or algorithmic specification. The command TTls allows the user to list the available TextureTemperaments.
      </para>

<example>
<title>Listing all TextureTemperaments</title><screen>
[PI(q1)TI(b2)] :: <ui>ttls</ui>
TextureTemperaments available for TI b2:
{name,tunning}
 + TwelveEqual       
   Pythagorean       
   Just              
   MeanTone          
   Split24Upper      
   Split24Lower      
   Interleave24Even  
   Interleave24Odd   
   NoiseLight        
   NoiseMedium       
   NoiseHeavy       
</screen></example>


      <para>The temperament "TwelveEqual" is the active Temperament for current Texture b2. This temperament produces equal-tempered frequencies. To select a different temperament for the active Texture, enter the command TTo. In the example below the user selects the temperament NoiseLight for Textures b2 and Texture b1, and then selects the temperament NoiseMedium for Texture a1. In the last case, two command are given on the some command line. As is the UNIX convention, the commands and arguments are separated by a semicolon:</para>

<example>
<title>Selecting Texture Temperament with TTo</title>
<screen>[PI(q1)TI(b2)] :: <ui>tto</ui>
select a TextureTemperament for TI b2: (name or number 1-11): <ui>nl</ui>
TT NoiseLight now active for TI b2.

[PI(q1)TI(b2)] :: <ui>tio b1</ui>
TI b1 now active.

[PI(q1)TI(b1)] :: <ui>tto nl</ui>
TT NoiseLight now active for TI b1.

[PI(q1)TI(b1)] :: <ui>tio a1; tto nm</ui>
TI a1 now active.

TT NoiseMedium now active for TI a1.

[PI(q1)TI(a1)] :: 
</screen></example>

<!-- tutorial06-e.xml -->


<!-- microtones and eventoutputs -->

      <para>Not all EventOutputs can perform microtones. MIDI files, for example, cannot store microtonal specifications of pitch. Though such pitches will be generated within athenaCL, they will be rounded when written to the MIDI file. EventOutputs for Csound, however, can handle microtones.
      </para>
            
            
<!-- should move to a different event output here, but amplitudes are not comparing correctly; fix in the future. -->
            
            

   </sect1>


</chapter>